using System.Runtime.CompilerServices;

namespace ArcPyNet;

public class _3DAnalyst
{
    private static Code Run(object?[] args, [CallerMemberName] string method = "")
    {
        return ArcPy.Instance.Run($"arcpy.ddd.{method}", args);
    }

    public Code ASCII3DToFeatureClass(params object?[] args) => Run(args);
    public Code AddFeatureClassToTerrain(params object?[] args) => Run(args);
    public Code AddSurfaceInformation(params object?[] args) => Run(args);
    public Code AddTerrainPoints(params object?[] args) => Run(args);
    public Code AddTerrainPyramidLevel(params object?[] args) => Run(args);
    public Code AddZInformation(params object?[] args) => Run(args);
    public Code AppendTerrainPoints(params object?[] args) => Run(args);
    public Code Aspect(params object?[] args) => Run(args);
    public Code Buffer3D(params object?[] args) => Run(args);
    public Code BuildTerrain(params object?[] args) => Run(args);
    public Code ChangeLasClassCodes(params object?[] args) => Run(args);
    public Code ChangeTerrainReferenceScale(params object?[] args) => Run(args);
    public Code ChangeTerrainResolutionBounds(params object?[] args) => Run(args);
    public Code ClassifyLasBuilding(params object?[] args) => Run(args);
    public Code ClassifyLasByHeight(params object?[] args) => Run(args);
    public Code ClassifyLasGround(params object?[] args) => Run(args);
    public Code ClassifyLasNoise(params object?[] args) => Run(args);
    public Code ClassifyLasOverlap(params object?[] args) => Run(args);
    public Code ClassifyPointCloudUsingTrainedModel(params object?[] args) => Run(args);
    public Code ColorizeLas(params object?[] args) => Run(args);
    public Code ConstructSightLines(params object?[] args) => Run(args);
    public Code Contour(params object?[] args) => Run(args);
    public Code ContourList(params object?[] args) => Run(args);
    public Code ContourWithBarriers(params object?[] args) => Run(args);
    public Code CopyTin(params object?[] args) => Run(args);
    public Code CreateTerrain(params object?[] args) => Run(args);
    public Code CreateTin(params object?[] args) => Run(args);
    public Code Curvature(params object?[] args) => Run(args);
    public Code CutFill(params object?[] args) => Run(args);
    public Code DecimateTinNodes(params object?[] args) => Run(args);
    public Code DeleteTerrainPoints(params object?[] args) => Run(args);
    public Code DelineateTinDataArea(params object?[] args) => Run(args);
    public Code Difference3D(params object?[] args) => Run(args);
    public Code Divide(params object?[] args) => Run(args);
    public Code EditTin(params object?[] args) => Run(args);
    public Code EncloseMultiPatch(params object?[] args) => Run(args);
    public Code EnforceRiverMonotonicity(params object?[] args) => Run(args);
    public Code EvaluatePointCloudClassificationModel(params object?[] args) => Run(args);
    public Code ExtractLas(params object?[] args) => Run(args);
    public Code ExtractMultipatchFromMesh(params object?[] args) => Run(args);
    public Code ExtractPowerLinesFromPointCloud(params object?[] args) => Run(args);
    public Code ExtrudeBetween(params object?[] args) => Run(args);
    public Code FeatureClassZToASCII(params object?[] args) => Run(args);
    public Code FeatureTo3DByAttribute(params object?[] args) => Run(args);
    public Code FeaturesFromCityEngineRules(params object?[] args) => Run(args);
    public Code FenceDiagram(params object?[] args) => Run(args);
    public Code Float(params object?[] args) => Run(args);
    public Code GenerateClearanceSurface(params object?[] args) => Run(args);
    public Code HillShade(params object?[] args) => Run(args);
    public Code Idw(params object?[] args) => Run(args);
    public Code Import3DFiles(params object?[] args) => Run(args);
    public Code Inside3D(params object?[] args) => Run(args);
    public Code Int(params object?[] args) => Run(args);
    public Code InterpolatePolyToPatch(params object?[] args) => Run(args);
    public Code InterpolateShape(params object?[] args) => Run(args);
    public Code Intersect3D(params object?[] args) => Run(args);
    public Code Intersect3DLineWithMultiPatch(params object?[] args) => Run(args);
    public Code Intersect3DLineWithSurface(params object?[] args) => Run(args);
    public Code Intersect3DLines(params object?[] args) => Run(args);
    public Code Intervisibility(params object?[] args) => Run(args);
    public Code IsClosed3D(params object?[] args) => Run(args);
    public Code Kriging(params object?[] args) => Run(args);
    public Code LASToMultipoint(params object?[] args) => Run(args);
    public Code LandXMLToTin(params object?[] args) => Run(args);
    public Code LasBuildingMultipatch(params object?[] args) => Run(args);
    public Code LasDatasetToTin(params object?[] args) => Run(args);
    public Code LasHeightMetrics(params object?[] args) => Run(args);
    public Code LasPointStatsByArea(params object?[] args) => Run(args);
    public Code Layer3DToFeatureClass(params object?[] args) => Run(args);
    public Code LayerToKML(params object?[] args) => Run(args);
    public Code LineOfSight(params object?[] args) => Run(args);
    public Code LocateLasPointsByProximity(params object?[] args) => Run(args);
    public Code LocateOutliers(params object?[] args) => Run(args);
    public Code Lookup(params object?[] args) => Run(args);
    public Code MapToKML(params object?[] args) => Run(args);
    public Code MinimumBoundingVolume(params object?[] args) => Run(args);
    public Code Minus(params object?[] args) => Run(args);
    public Code MultiPatchFootprint(params object?[] args) => Run(args);
    public Code NaturalNeighbor(params object?[] args) => Run(args);
    public Code Near3D(params object?[] args) => Run(args);
    public Code ObserverPoints(params object?[] args) => Run(args);
    public Code Plus(params object?[] args) => Run(args);
    public Code PointFileInformation(params object?[] args) => Run(args);
    public Code PolygonVolume(params object?[] args) => Run(args);
    public Code PreparePointCloudTrainingData(params object?[] args) => Run(args);
    public Code RasterDomain(params object?[] args) => Run(args);
    public Code RasterTin(params object?[] args) => Run(args);
    public Code RasterToMultipoint(params object?[] args) => Run(args);
    public Code ReclassByASCIIFile(params object?[] args) => Run(args);
    public Code ReclassByTable(params object?[] args) => Run(args);
    public Code Reclassify(params object?[] args) => Run(args);
    public Code RegularizeAdjacentBuildingFootprint(params object?[] args) => Run(args);
    public Code RegularizeBuildingFootprint(params object?[] args) => Run(args);
    public Code RemoveFeatureClassFromTerrain(params object?[] args) => Run(args);
    public Code RemoveTerrainPoints(params object?[] args) => Run(args);
    public Code RemoveTerrainPyramidLevel(params object?[] args) => Run(args);
    public Code ReplaceTerrainPoints(params object?[] args) => Run(args);
    public Code SetLasClassCodesUsingFeatures(params object?[] args) => Run(args);
    public Code SetLasClassCodesUsingRaster(params object?[] args) => Run(args);
    public Code Simplify3DLine(params object?[] args) => Run(args);
    public Code Skyline(params object?[] args) => Run(args);
    public Code SkylineBarrier(params object?[] args) => Run(args);
    public Code SkylineGraph(params object?[] args) => Run(args);
    public Code Slice(params object?[] args) => Run(args);
    public Code Slope(params object?[] args) => Run(args);
    public Code Spline(params object?[] args) => Run(args);
    public Code SplineWithBarriers(params object?[] args) => Run(args);
    public Code StackProfile(params object?[] args) => Run(args);
    public Code SunShadowFrequency(params object?[] args) => Run(args);
    public Code SunShadowVolume(params object?[] args) => Run(args);
    public Code SurfaceAspect(params object?[] args) => Run(args);
    public Code SurfaceContour(params object?[] args) => Run(args);
    public Code SurfaceDifference(params object?[] args) => Run(args);
    public Code SurfaceLength(params object?[] args) => Run(args);
    public Code SurfaceParameters(params object?[] args) => Run(args);
    public Code SurfaceSlope(params object?[] args) => Run(args);
    public Code SurfaceSpot(params object?[] args) => Run(args);
    public Code SurfaceVolume(params object?[] args) => Run(args);
    public Code TerrainToPoints(params object?[] args) => Run(args);
    public Code TerrainToRaster(params object?[] args) => Run(args);
    public Code TerrainToTin(params object?[] args) => Run(args);
    public Code ThinLas(params object?[] args) => Run(args);
    public Code TileLas(params object?[] args) => Run(args);
    public Code Times(params object?[] args) => Run(args);
    public Code TinAspect(params object?[] args) => Run(args);
    public Code TinContour(params object?[] args) => Run(args);
    public Code TinDifference(params object?[] args) => Run(args);
    public Code TinDomain(params object?[] args) => Run(args);
    public Code TinEdge(params object?[] args) => Run(args);
    public Code TinLine(params object?[] args) => Run(args);
    public Code TinNode(params object?[] args) => Run(args);
    public Code TinPolygonTag(params object?[] args) => Run(args);
    public Code TinPolygonVolume(params object?[] args) => Run(args);
    public Code TinRaster(params object?[] args) => Run(args);
    public Code TinSlope(params object?[] args) => Run(args);
    public Code TinTriangle(params object?[] args) => Run(args);
    public Code TopoToRaster(params object?[] args) => Run(args);
    public Code TopoToRasterByFile(params object?[] args) => Run(args);
    public Code TrainPointCloudClassificationModel(params object?[] args) => Run(args);
    public Code Trend(params object?[] args) => Run(args);
    public Code Union3D(params object?[] args) => Run(args);
    public Code UpdateFeatureZ(params object?[] args) => Run(args);
    public Code Viewshed(params object?[] args) => Run(args);
    public Code Viewshed2(params object?[] args) => Run(args);
    public Code Visibility(params object?[] args) => Run(args);
}
